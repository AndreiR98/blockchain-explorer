{
  "version": 3,
  "sources": ["../../ecdsa-secp256k1/config.js", "../../ecdsa-secp256k1/lib.js", "../../ecdsa-secp256k1/index.js"],
  "sourcesContent": ["// secp256k1\nconst config = {\n    'secp256k1':{\n        p:0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2Fn,\n        a:0n,\n        b:7n,\n        G:0x0479BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8n,\n        n:0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141n,\n        h:1n\n    }\n}\nmodule.exports = config;", "// T = (p, a, b, G, n, h)\n// E : y^2 ≡ x^3 + ax + b (mod p)\n// 相同的点相加第一式: λ≡(3x1^2+ a)/2y1(mod p)\n// 相同的点相加第二式: x3 ≡ λ^2 − 2x1 (mod p), y3≡ λ(x1 − x3) − y1 (mod p)\n// 不同的点相加第一式: λ≡ （y2 − y1）/（x2 − x1）(mod p)\n// 不同的点相加第二式: x3 ≡ λ^2 − x1 − x2 (mod p), y3 ≡ λ(x1 − x3) − y1 (mod p)\n\n\nfunction num2Point(num){\n    let numHex = num.toString(16);\n    let len = 129;\n    if(numHex.length!=len){\n        throw new Error(`point num length must be ${len}!`);\n    }\n    if(numHex[0]!='4') {\n        throw new Error('point num data not right!');\n    }\n    let startX = 1;\n    let startY= 65;\n    let offset = 64;\n    return {x:BigInt(`0x${numHex.slice(startX,startX+offset)}`),y:BigInt(`0x${numHex.slice(startY,startY+offset)}`)};\n\n}\n\nfunction point2HexStr(point) {\n    return `0x04${point.x.toString(16)}${point.y.toString(16)}`;\n}\n\nfunction point2Num(point) {\n    return BigInt(point2HexStr(point));\n}\n\nfunction postiveMod(num,modNum) {\n    return (num%modNum + modNum)%modNum;\n}\n// 欧几里德算法求乘法逆元\nfunction inverseMulti(x,modNum) {\n    let x1= 1n,x2 = 0n,x3 = modNum;\n    let y1 = 0n,y2=1n,y3=(x%modNum+modNum)%modNum;\n    let q;\n    let t1,t2,t3;\n    while(true){\n        if(y3==0n)throw new Error('multiplicative inverse modulo is no answer!');\n        if(y3==1n)return y2;\n        q = x3/y3;\n        t1=x1-q*y1;t2=x2-q*y2;t3=x3-q*y3;\n        x1=y1;x2=y2;x3=y3;\n        y1=t1;y2=t2;y3=t3;\n    }\n}\n\nfunction getPrivteKeyNumByRand(n) {\n    let nHex = n.toString(16);\n    let privteKeyList = [];\n    let isZero = true;\n    for(let i=0;i<nHex.length;i++) {\n        let rand16Num = Math.round(Math.random()*parseInt(nHex[i],16));\n        privteKeyList.push(rand16Num.toString(16));\n        if(rand16Num>0) {isZero = false;}\n    }\n    if(isZero){return getPrivteKeyNumByRand(n);}\n    return BigInt(`0x${privteKeyList.join('')}`);\n}\n\nfunction addSamePoint(x1,y1,modNum,a) {\n    let ru = postiveMod((3n*(x1**2n)+a)*inverseMulti(2n*y1, modNum), modNum);\n    let x3 = postiveMod((ru**2n) - (2n*x1), modNum);\n    let y3 = postiveMod(ru*(x1-x3) - y1, modNum);\n    return {x:x3,y:y3};\n}\nfunction addDiffPoint(x1,y1,x2,y2,modNum) {\n    let ru = postiveMod((y2-y1)*inverseMulti(x2-x1, modNum), modNum);\n    let x3 = postiveMod(ru**2n - x1 - x2, modNum);\n    let y3 = postiveMod(ru*(x1-x3)-y1, modNum);\n    return {x:x3,y:y3};\n}\n\nfunction getPointByNum(num,pointG,p,a) {\n    let numBin = num.toString(2);\n    let nowPoint = null;\n    let nextPoint = pointG;\n    for(let i=numBin.length-1;i>=0;i--) {\n        if(numBin[i]=='1') {\n            if(nowPoint === null) {\n                nowPoint = nextPoint;\n            } else {\n                nowPoint = addDiffPoint(nowPoint.x,nowPoint.y,nextPoint.x,nextPoint.y,p);\n            }\n        }\n        nextPoint = addSamePoint(nextPoint.x,nextPoint.y,p,a);\n    }\n    return nowPoint;\n}\n\n/**\n * s = k^-1 (e + rd) mod n \n * M为要签名消息,d为私钥的值\n */\nfunction sign(n,pointG,p,a,d,mNum) {\n    let k,R;\n    let r = 0n;\n    while(r==0n) {\n        k = getPrivteKeyNumByRand(n);\n        R = getPointByNum(k,pointG,p,a);\n        r = postiveMod(R.x,n);\n    }\n    let e = mNum;\n    let s = postiveMod(((e+(r*d))*inverseMulti(k,n)),n);\n    if(s==0n) {\n        return sign(n,pointG,p,a,d,M,encoding);\n    }\n    return {r,s};\n}\n/**\n * \n * @param {*} pointQ 为我的公钥原值的点\n */\nfunction verify(n,pointG,p,a,pointQ,S,mNum) {\n    let {r,s} = S;\n    if(!(r>0n && r<n && s>0n && s<n)){return false;}\n    let e = mNum;\n    let w = inverseMulti(s,n);\n    let u1 = postiveMod((e*w),n);\n    let u2 = postiveMod((r*w),n);\n    let u1Point = getPointByNum(u1,pointG,p,a);\n    let u2Point = getPointByNum(u2,pointQ,p,a);\n    let pointR;\n    if(u1Point.x==u2Point.x && u1Point.y==u2Point.y) {\n        pointR = addSamePoint(u1Point.x,u1Point.y,p,a);\n    } else {\n        pointR = addDiffPoint(u1Point.x,u1Point.y,u2Point.x,u2Point.y,p);\n    }\n    if(pointR.x==0n && pointR.y==0n) {return false;}\n    let v = postiveMod(pointR.x,n);\n    if(v==r) {\n        return true;\n    }\n    return false;\n}\n\nmodule.exports = {\n    num2Point,\n    point2HexStr,\n    point2Num,\n    getPrivteKeyNumByRand,\n    addSamePoint,\n    addDiffPoint,\n    getPointByNum,\n    sign,\n    verify\n}", "const secp256k1Config = require('./config')['secp256k1'];\nconst ecc = require('./lib')\n\nlet pointG = ecc.num2Point(secp256k1Config.G);\n\nfunction StringConvertBigNum(num) {\n    if(typeof num == 'string') {\n        return BigInt(num);\n    }\n    return num;\n}\n\nfunction randPrivateKeyNum() {\n    return ecc.getPrivteKeyNumByRand(secp256k1Config.n);\n}\n\nfunction publicKeyNum2Point(publicKeyNum) {\n    return ecc.num2Point(StringConvertBigNum(publicKeyNum));\n}\n\nfunction publicKeyPoint2HexStr(publicKeyPoint) {\n    return ecc.point2HexStr({\n        x:StringConvertBigNum(publicKeyPoint.x),\n        y:StringConvertBigNum(publicKeyPoint.y)\n    });\n}\n\nfunction publicKeyPoint2Num(publicKeyPoint) {\n    return ecc.point2Num({\n        x:StringConvertBigNum(publicKeyPoint.x),\n        y:StringConvertBigNum(publicKeyPoint.y)\n    });\n}\n\n\nfunction getPublicKeyPoint(privateKeyNum) {\n    return ecc.getPointByNum(\n        StringConvertBigNum(privateKeyNum),\n        pointG,secp256k1Config.p,secp256k1Config.a\n    );\n}\n\nfunction sign(privateKeyNum,msgDataNum) {\n    return ecc.sign(\n        secp256k1Config.n,pointG,secp256k1Config.p,secp256k1Config.a,\n        StringConvertBigNum(privateKeyNum),\n        StringConvertBigNum(msgDataNum)\n    );\n}\n\nfunction verify(publicKeyPoint,signData,msgDataNum) {\n    return ecc.verify(\n        secp256k1Config.n,pointG,secp256k1Config.p,secp256k1Config.a,\n        {\n            x:StringConvertBigNum(publicKeyPoint.x),\n            y:StringConvertBigNum(publicKeyPoint.y)\n        },\n        StringConvertBigNum(signData),\n        StringConvertBigNum(msgDataNum)\n    );\n}\nconst defaultData = {\n    publicKeyNum2Point,\n    publicKeyPoint2HexStr,\n    publicKeyPoint2Num,\n    randPrivateKeyNum,\n    getPublicKeyPoint,\n    sign,\n    verify\n}\nmodule.exports = defaultData;\nmodule.exports.default = defaultData;\n\n"],
  "mappings": "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",
  "names": []
}
