{
  "version": 3,
  "sources": ["../../int/int.js", "../../bitcoin-address/base58.js", "../../bitcoin-address/index.js"],
  "sourcesContent": ["\nvar Int = function(num) {\n    // can be called as a function\n    if (!(this instanceof Int)) {\n        return new Int(num);\n    }\n\n    var self = this;\n\n    // copy existing Int object\n    if (num instanceof Int){\n        self._s = num._s;\n        self._d = num._d.slice();\n        return;\n    }\n\n    // sign\n    self._s = ((num += '').charAt(0) === '-') ? 1 : 0;\n\n    // digits\n    self._d = [];\n\n    // remove any leading - or + as well as other invalid characters\n    num = num.replace(/[^\\d]/g, '');\n\n    // _d is the array of single digits making up the number\n    var ln = num.length;\n    for (var i=0 ; i<ln ; ++i) {\n        self._d.push(+num[i]);\n    }\n\n    trim_zeros(self);\n\n    // zeros are normalized to positive\n    // TODO (shtylman) consider not doing this and only checking in toString?\n    if (self._d.length === 0) {\n        self._s = 0;\n    }\n};\n\n/// add num and return new integer\nInt.prototype.add = function(num) {\n    var self = this;\n    var num = ensure_int(num);\n\n    if(self._s != num._s) {\n        num._s ^= 1;\n        var res = self.sub(num);\n        num._s ^= 1;\n        return res;\n    }\n\n    // a will be the smaller number\n    if (self._d.length < num._d.length) {\n        var a = self._d;\n        var b = num._d;\n        var out = Int(num);\n    }\n    else {\n        var a = num._d;\n        var b = self._d;\n        var out = Int(self);\n    }\n\n    var la = a.length;\n    var lb = b.length;\n\n    // clone the larger number\n    var res = out._d;\n\n    var carry = 0;\n    for (var i = lb - 1, j = la - 1; i >= 0, j >= 0 ; --i, --j) {\n        res[i] += carry + a[j];\n        carry = 0;\n\n        if (res[i] >= 10) {\n            res[i] -= 10;\n            carry = 1;\n        }\n    }\n\n    // carry the rest of the way\n    for (; i >= 0 ; --i) {\n        res[i] += carry;\n        carry = 0;\n        if (res[i] >= 10) {\n            res[i] -= 10;\n            carry = 1;\n        }\n\n        // no carry, rest of the number will be unchanged\n        if (carry === 0) {\n            break;\n        }\n    }\n\n    // remaining carry?\n    if (carry > 0) {\n        res.unshift(1);\n    }\n\n    return out;\n}\n\nInt.prototype.sub = function(num) {\n    var self = this;\n\n    // some operations are destructive\n    var num = Int(num);\n\n    if(self._s != num._s) {\n        num._s ^= 1;\n        var res = this.add(num);\n        num._s ^= 1;\n        return res;\n    }\n\n    var s1 = self._s;\n    var s2 = num._s;\n\n    // make numbers positive for determining the greater one\n    // in absolute terms\n    self._s = num._s = 0;\n\n    // make a the smaller number (abs value)\n    var c = self.lt(num);\n    var a = c ? self._d : num._d;\n    var b = c ? num._d : self._d;\n\n    // restore original signs\n    self._s = s1;\n    num._s = s2;\n\n    var la = a.length;\n    var lb = b.length;\n\n    var out = Int((c) ? num : self);\n    out._s = num._s & self._s; // ??\n    var res = out._d;\n\n    // basic subtraction for common size\n    var borrow = 0;\n    for (var i = lb - 1, j = la - 1; i >= 0, j >= 0 ; --i, --j) {\n        res[i] -= a[j] + borrow;\n        borrow = 0;\n\n        if (res[i] < 0) {\n            res[i] += 10;\n            borrow = 1;\n        }\n    }\n\n    // carry the rest of the way\n    for (; i >= 0 ; --i) {\n        res[i] -= borrow;\n        borrow = 0;\n        if (res[i] < 0) {\n            res[i] += 10;\n            borrow = 1;\n        }\n\n        // no carry, rest of the number will be unchanged\n        if (borrow === 0) {\n            break;\n        }\n    }\n\n    // flip the sign if sub num was larger\n    c && (out._s ^= 1);\n\n    trim_zeros(out);\n\n    // TODO the subtraction should just be smarter\n    if (out._d.length === 0) {\n        out._s = 0;\n    }\n\n    return out;\n};\n\nInt.prototype.mul = function(num) {\n    var self = this;\n\n    var r = self._d.length >= (num = Int(num))._d.length;\n    var a = (r ? self : num)._d;\n    var b = (r ? num : self)._d;\n\n    var la = a.length;\n    var lb = b.length;\n\n    var sum = Int();\n    var zeros = [];\n\n    // loop for smaller number\n    for (var i = lb - 1 ; i >= 0 ; --i) {\n        var out = Int();\n\n        // insert proper number of trailing 0s\n        var val = out._d = out._d.concat(zeros);\n\n        // reset carry\n        var carry = 0;\n\n        // top number\n        for (var j = la - 1; j >= 0; --j) {\n            // multiplication result\n            var mul = b[i] * a[j] + carry;\n\n            // this is the single digit we keep\n            var res = mul % 10;\n\n            // carry amount\n            carry = Math.floor(mul / 10);\n\n            // insert the number into our new integer\n            val.unshift(res);\n        }\n\n        // apply any remaining carry\n        if (carry) {\n            val.unshift(carry);\n        }\n\n        sum = sum.add(out);\n        zeros.push(0);\n    }\n\n    sum._s = self._s ^ num._s;\n    return sum;\n};\n\nInt.prototype.div = function(num) {\n    var self = this;\n\n    // copy since we change sign of num\n    var num = Int(num);\n\n    if(num == '0') {\n        throw new Error('Division by 0');\n    }\n    else if(self == '0') {\n        return Int();\n    }\n\n    // copy since we do destructive things\n    var numerator = self._d.slice();\n\n    var quo = Int();\n    quo._s = self._s ^ num._s;\n\n    // normalize num to positive number\n    var orig_s = num._s;\n    num._s = 0;\n\n    // remainder from previous calculation\n    var rem = Int();\n\n    while (numerator.length) {\n        // long division\n        // shift numbers off the numerator until we have achieved size\n        // every number after the first causes a 0 to be inserted\n        // numbers shifted in from the remainder should not cause 0 insertion\n\n        var c = 0;\n        while (numerator.length && rem.lt(num)) {\n            if (c++ > 0) {\n                quo._d.push(0);\n            }\n\n            // shift a number from numerator to our running num\n            rem._d.push(numerator.shift());\n\n            // important to trim here since 009 - N won't be done right otherwise\n            trim_zeros(rem);\n        }\n\n        var count = 0;\n        while(rem.gte(num) && ++count) {\n            rem = rem.sub(num);\n        }\n\n        if (count === 0) {\n            quo._d.push(0);\n            break;\n        }\n\n        quo._d.push(count);\n    }\n\n    var rlen = rem._d.length;\n\n    if (rlen > 1 || (quo._s && rlen > 0)) {\n        rem = rem.add(5);\n    }\n\n    if (quo._s && (rlen !== rem._d.length || rem._d[0] >= 5)) {\n        quo = quo.sub(1);\n    }\n\n    // put back the sign of num\n    num._s = orig_s;\n\n    return trim_zeros(quo);\n};\n\nInt.prototype.mod = function(num) {\n    return this.sub(this.div(num).mul(num));\n};\n\nInt.prototype.pow = function(num) {\n    var out = Int(this);\n    if((num = (Int(num))) == 0) {\n        return out.set(1);\n    }\n\n    for(var i = Math.abs(num); --i; out.set(out.mul(this)));\n    return num < 0 ? out.set((Int(1)).div(out)) : out;\n};\n\n/// set this number to the value of num\nInt.prototype.set = function(num) {\n    this.constructor(num);\n    return this;\n};\n\n/// -1 if self < n, 0 if self == n, 1 if self > n\nInt.prototype.cmp = function(num) {\n    var self = this;\n    var num = ensure_int(num);\n\n    if (self._s != num._s) {\n        return self._s ? -1 : 1;\n    }\n\n    var a = self._d;\n    var b = num._d;\n\n    var la = a.length;\n    var lb = b.length;\n\n    if (la != lb) {\n        return ((la > lb) ^ self._s) ? 1 : -1;\n    }\n\n    for (var i = 0; i < la; ++i) {\n        if (a[i] != b[i]) {\n            return ((a[i] > b[i]) ^ self._s) ? 1 : -1;\n        }\n    }\n\n    // no differences\n    return 0;\n};\n\nInt.prototype.neg = function() {\n    var out = Int(this);\n    out._s ^= 1;\n    return out;\n};\n\nInt.prototype.abs = function() {\n    var out = Int(this);\n    out._s = 0;\n    return out;\n};\n\n// alphabet for converting to a specific base\nvar alphabet = '0123456789abcdefghijklmnopqrstuvwxyz';\n\nInt.prototype.valueOf = Int.prototype.toString = function(radix){\n    var self = this;\n\n    if (!radix || radix === 10) {\n        return (self._s && self._d.length ? '-' : '') + ((self._d.length) ? self._d.join('') : '0');\n    }\n\n    if (radix < 2 || radix > 36) {\n        throw RangeError('radix out of range: ' + radix);\n    }\n\n    var radix_pow = Math.pow(radix, 6);\n\n    var rem = self;\n    var result = '';\n    while (true) {\n        var div = rem.div(radix_pow);\n        var int = rem.sub(div.mul(radix_pow));\n        var digits = (+int.toString()).toString(radix);\n        rem = div;\n\n        if (rem.eq(0)) {\n            return digits + result;\n        }\n        else {\n            while (digits.length < 6) {\n                digits = '0' + digits;\n            }\n            result = '' + digits + result;\n        }\n    }\n};\n\nInt.prototype.gt = function (num) {\n    return this.cmp(num) > 0;\n};\n\nInt.prototype.gte = function (num) {\n    return this.cmp(num) >= 0;\n};\n\nInt.prototype.eq = function (num) {\n    return this.cmp(num) === 0;\n};\n\nInt.prototype.ne = function (num) {\n    return this.cmp(num) !== 0;\n};\n\nInt.prototype.lt = function (num) {\n    return this.cmp(num) < 0;\n};\n\nInt.prototype.lte = function (num) {\n    return this.cmp(num) <= 0;\n};\n\n/// private api\n\nfunction ensure_int(val) {\n    if (val instanceof Int) {\n        return val;\n    }\n\n    return Int(val);\n}\n\n/// remove leading 0's from the int\nfunction trim_zeros(int) {\n    while (int._d.length && int._d[0] === 0) {\n        int._d.shift();\n    }\n\n    return int;\n}\n\nmodule.exports = Int;\n\n", "\n// 3rd party\nvar int = require('int');\n\n// prep position lookup table\nvar vals = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nvar positions = {};\nfor (var i=0 ; i < vals.length ; ++i) {\n    positions[vals[i]] = i;\n}\n\n/// decode a base58 string payload into a hex representation\nfunction decode(payload) {\n    var base = 58;\n\n    var length = payload.length;\n    var num = int(0);\n    var leading_zero = 0;\n    var seen_other = false;\n    for (var i=0; i<length ; ++i) {\n        var char = payload[i];\n        var p = positions[char];\n\n        // if we encounter an invalid character, decoding fails\n        if (p === undefined) {\n            throw new Error('invalid base58 string: ' + payload);\n        }\n\n        num = num.mul(base).add(p);\n\n        if (char == '1' && !seen_other) {\n            ++leading_zero;\n        }\n        else {\n            seen_other = true;\n        }\n    }\n\n    var hex = num.toString(16);\n\n    // num.toString(16) does not have leading 0\n    if (hex.length % 2 !== 0) {\n        hex = '0' + hex;\n    }\n\n    // strings starting with only ones need to be adjusted\n    // e.g. '1' should map to '00' and not '0000'\n    if (leading_zero && !seen_other) {\n      --leading_zero;\n    }\n\n    while (leading_zero-- > 0) {\n        hex = '00' + hex;\n    }\n\n    return hex;\n}\n\nmodule.exports.decode = decode;\n", "\n// builtin\nvar crypto = require('crypto');\n\n// local\nvar base58 = require('./base58');\n\nvar address_types = {\n    prod: '00',\n    testnet: '6f'\n};\n\nvar p2sh_types = {\n    prod: '05',\n    testnet: 'c4'\n};\n\n/// return address type if valid base58 address, otherwise null\nfunction get_address_type(address) {\n    var decoded_hex;\n    try {\n        decoded_hex = base58.decode(address);\n    } catch (e) {\n        // if decoding fails, assume invalid address\n        return null;\n    }\n\n    // make a usable buffer from the decoded data\n    var decoded = new Buffer(decoded_hex, 'hex');\n\n    // should be 25 bytes per btc address spec\n    if (decoded.length != 25) {\n        return null;\n    }\n\n    var length = decoded.length;\n    var cksum = decoded.slice(length - 4, length).toString('binary');\n    var body = decoded.slice(0, length - 4);\n\n    var good_cksum = sha256_digest(sha256_digest(body)).toString('binary').substr(0,4);\n    return (cksum === good_cksum ? decoded_hex.slice(0, 2) : null);\n}\n\nmodule.exports.get_address_type = get_address_type;\n\n/// check if a wallet address is valid\n/// if address_type is supplied\n/// also checks that the address matches that expected version\n/// return {boolean} true if valid, false otherwise\nfunction validate(address, address_type) {\n    // default is to check that address is regular production address\n    address_type = address_type || 'prod';\n\n    var type = get_address_type(address);\n    if (type === null) {\n        return false;\n    }\n\n    if (type !== address_types[address_type] &&\n        type !== p2sh_types[address_type]) {\n        return false;\n    }\n\n    return true;\n}\n\nmodule.exports.validate = validate;\n\n/// private methods\n\n// helper to perform sha256 digest\nfunction sha256_digest(payload) {\n    return crypto.createHash('sha256').update(payload).digest();\n}\n"],
  "mappings": "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",
  "names": ["i"]
}
